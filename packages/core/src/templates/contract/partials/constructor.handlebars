public static singletonTrusted(ethApi: EthApi): {{contractName}}Contract|null {
  if (!artifacts.{{contractName}}.networks) {
    debug("Trying to get singleton from contract without any singleton data");
    return null;
  }
  const networkId = ethApi.networkId;
  const networkData = artifacts.{{contractName}}.networks[networkId];
  if (!networkData) {
    return null;
  }
  return {{contractName}}Contract.atUntrusted(ethApi, networkData.address);
}
public static atUntrusted(ethApi: EthApi, address: EthAddress): {{contractName}}Contract {
  const clazz = ethApi.web3.eth.contract(artifacts.{{contractName}}.abi);
  return new {{contractName}}Contract(clazz.at(address));
}
// TODO(ritave): This code won't work with smart-contracts with library links
//               see [ch429] in Clubhouse
public static deployTrusted = {
  async sendTransactionAsync(
      ethApi: EthApi,
      {{> typed_inputs inputs=ctor.inputs }}
      txData?: TxData): Promise<string> {
    const web3 = ethApi.web3;
    const clazz = web3.eth.contract(artifacts.{{contractName}}.abi);
    const options: TxData = { data: artifacts.{{contractName}}.bytecode };
    Object.assign(options, txData);
    if (!options.gas) {
      options.gas = await {{contractName}}Contract.deployTrusted
        .estimateGasAsync(
          web3,
          {{> params inputs=ctor.inputs }}
          options);
    }
    const txhash = await new Promise<string>((resolve, reject) => {
      /* There's a bug in Metamask, this callback should be called twice, first when the transaction
       * gets into mempool, and second when it's mined. But it's called only once, so we have to resolve
       * the contract on our own
       */
      clazz.new(
        {{> params inputs=contract.inputs}}
        options,
        (err: any, instance: Web3.ContractInstance) => {
          if (err) {
            return reject(err);
          }
          return resolve(instance.transactionHash);
        });
    });
    return txhash;
  },
  async estimateGasAsync(
      web3: Web3,
      {{> typed_inputs inputs=ctor.inputs }}
      txData?: TxData): Promise<number> {
    const clazz = web3.eth.contract(artifacts.{{contractName}}.abi);
    const contractData = ((clazz.new) as any).getData(
      {{> params inputs=ctor.inputs}}
      txData);
    // tslint:disable-next-line:no-unbound-method
    const promisifed = promisify<number>(web3.eth.estimateGas, web3.eth);
    return promisifed({data: contractData});
  },
};
