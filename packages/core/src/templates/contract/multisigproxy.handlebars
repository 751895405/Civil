/*
 * This file is auto-generated using abi-gen. Any changes will be reverted
 */

import { isDefined, bindNestedAll } from "@joincivil/utils";
import BigNumber from "bignumber.js";

import { BaseMultisigProxy, MultisigProxyTransaction } from "../../multisig/basemultisigproxy";
import { OwnableContract } from "../../interfaces/ownable";
import { Web3Wrapper } from "../../../utils/web3wrapper";
import { TxData } from "../../../types";

// TODO(ritave): Abi-Gen doesn't support lowercase contractName so we can't
//               import the Contract wrappers, we're using generics instead
export class {{contractName}}MultisigProxy<T extends OwnableContract> extends BaseMultisigProxy<T> {
  public static async create<T extends OwnableContract>(
    web3Wrapper: Web3Wrapper,
    instance: T,
  ): Promise<{{contractName}}MultisigProxy<T>> {
    const proxy = new {{contractName}}MultisigProxy<T>(web3Wrapper, instance);
    await proxy.resolveMultisig();
    return proxy;
  }

{{#each methods}}
  {{^this.constant}}
  {{> proxy_tx contractName=../contractName}}
  {{/this.constant}}
{{/each}}

  private constructor(web3Wrapper: Web3Wrapper, instance: T) {
    super(web3Wrapper, instance);
    bindNestedAll(this, ["constructor", "instance", "multisig", "web3Wrapper"]);
  }
}
